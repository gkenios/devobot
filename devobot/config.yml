agent:
- id: start
  next: intent
  function: start

- id: intent
  step_output: Identifying the next action  # To optionally output a step of your node
  next_conditional:
    key: classification
    mapping:
      faq: faq
      manage_desk_reservations: manage_desk_reservations
      reject: reject
  function: classify
  function_params:
    prompt: |-
      Devoteam is an international consulting firm. Devoteam employees are going to ask you questions.
      - If the question is related to Devoteam, the office, parking or in general with any information that can be potentially be found in the company's Frequently Asked Questions (FAQ), respond with '{"classification": "faq"}'.
      - If the question is about managing desk reservations (make or delete desk reservations), respond with '{"classification": "manage_desk_reservations"}'.
      - If the question is irrelevant, respond with '{"classification": "reject"}'.
    schema:
      classification:
        type: string
        description: |-
          The classification of the question.
          - faq: The question is related to Devoteam, the office, parking or in general with any information that can be potentially be found in the company's Frequently Asked Questions (FAQ).
          - book_desk: The question is about booking a desk for team events.
          - reject: The question is irrelevant.
    required: [classification]

- id: faq
  next: end
  function: rag
  function_params:
    number_of_docs: 3
    prompt: |-
      You are an assistant for question-answering tasks. Use the following pieces of retrieved context to answer the question. If you don't know the answer, just say that you don't know. Use three sentences maximum and keep the answer concise.
      Question: {question}
      Context: {context}
      Answer:

- id: manage_desk_reservations
  next: end
  function: tool_call
  function_params:
    tools: [book_desk, unbook_desk]
    tools_params:
      book_desk:
        client_id: "{{ joan_client_id }}"
        client_secret: "{{ joan_client_secret }}"
        company_id: "{{ joan_company_id }}"
      unbook_desk:
        client_id: "{{ joan_client_id }}"
        client_secret: "{{ joan_client_secret }}"
        company_id: "{{ joan_company_id }}"

- id: reject
  next: end
  function: defined_answer
  function_params:
    answer: >-
      I'm sorry. I cannot help you with that. I can help you with desk
      management (book or unbook) or answer questions related to Devoteam FAQs.

- id: end
  function: end


databases:
  vector: null


models:
  llm:
    api_key: "{{ llm_key }}"  # "{{ <secret> }}" references a secret by name
    api_url: https://openai-devoteam.openai.azure.com/
    api_version: "2024-10-21"  # Optional parameter
    model: gpt-4o-mini
  embeddings:
    api_key: "{{ embeddings_key }}"
    api_url: https://openai-devoteam.openai.azure.com/
    api_version: "2024-10-21" # https://learn.microsoft.com/en-us/azure/ai-services/openai/api-version-deprecation#latest-ga-api-release
    model: text-embedding-ada-002


secrets:
  hosts:  # Host names in [local, azure]
  - name: local
    vaults:
    - name: null
      secrets:
      - name: llm_key  # Secret name in the application (unique)
        value: LLM     # Secret name in the vault
      - name: embeddings_key
        value: EMBEDDINGS
      - name: joan_client_id
        value: JOANID
      - name: joan_client_secret
        value: JOANSECRET
      - name: joan_company_id
        value: JOANCOMPANYID

  # - name: azure
  #   vaults:
  #   - name: dvtm-gkenios-uva-dev-kv
  #     secrets:
  #     - name: llm_key  # Secret name in the application
  #       value: LLM     # Secret name in the vault
  #     - name: embeddings_key
  #       value: EMBEDDINGS
  #     - name: joan_client_id
  #       value: JOANID
  #     - name: joan_client_secret
  #       value: JOANSECRET
  #     - name: joan_company_id
  #       value: JOANCOMPANYID
